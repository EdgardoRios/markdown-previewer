{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","console","log","state","markdown","this","setState","inputStyle","width","height","marginLeft","marginRight","padding","className","Badge","variant","style","id","value","onChange","element","updateMarkdown","target","onClick","margin","border","backgroundColor","dangerouslySetInnerHTML","__html","marked","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sRAKqBA,G,wDACnB,WAAYC,GAAQ,IAAD,6BACjBC,QAAQC,IAAI,qBACZ,cAAMF,IACDG,MAAQ,CACXC,SAAU,gYAJK,E,2DAQJA,GACbH,QAAQC,IAAI,uBACZG,KAAKC,SAAS,CACZF,e,+BAIM,IAAD,OACPH,QAAQC,IAAI,eAEZ,IAEIK,EAAa,CACfC,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAS,QAcX,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,SAA7C,yBAMN,yBAAKF,UAAU,YACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,oBAKJ,yBAAKF,UAAU,aAAaG,MAAOT,GACjC,8BACEU,GAAG,SACHJ,UAAU,QACVG,MAAOT,EACPW,MAAOb,KAAKF,MAAMC,SAClBe,SAAU,SAACC,GACT,EAAKC,eAAeD,EAAQE,OAAOJ,UAGvC,6BACE,4BAAQD,GAAG,SAASM,QAAS,SAACH,GAC5B,EAAKd,SAAS,CACZF,SAvDD,mYAqDH,2BAUN,yBAAKS,UAAU,YACb,yBAAKA,UAAU,mBACb,4BACE,kBAACC,EAAA,EAAD,CAAOD,UAAU,oBAAoBE,QAAQ,aAA7C,aAKJ,yBACEE,GAAG,UACHD,MA/DM,CAChBR,MAAO,QACPC,OAAQ,OACRC,WAAY,OACZC,YAAa,OACbC,QAAS,OACTY,OAAQ,OACRC,OAAQ,iBACRC,gBAAiB,kBAwDPC,wBAAyB,CACvBC,OAAQC,IAAOxB,KAAKF,MAAMC,qB,GA9FX0B,IAAMC,YCOnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhD,QAAQgD,MAAMA,EAAMC,c","file":"static/js/main.c56c1b66.chunk.js","sourcesContent":["import React from 'react';\nimport Badge from \"react-bootstrap/Badge\";\nimport marked from 'marked';\nimport './index.css';\n\nexport default class App extends React.Component {\n  constructor(props) {\n    console.log('constructor runs');\n    super(props);\n    this.state = {\n      markdown: '# Heading H1  \\n## Heading H2  \\n---  \\n[Markdown Cheat Sheet](https://www.markdownguide.org/cheat-sheet/)  \\n**Bold**  \\n*Italic*  \\n~~Strikethrough~~  \\n`Code`  \\n- Unordered List  \\n1. Ordered List  \\n2. Ordered List  \\n- [ ] Task List  \\n- [x] Task List  \\n\\n![Image](https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/FreeCodeCamp_logo.png/250px-FreeCodeCamp_logo.png)'\n    };\n  }\n\n  updateMarkdown(markdown) {\n    console.log('updateMarkdown runs');\n    this.setState({\n      markdown\n    });\n  }\n\n  render() {\n    console.log('render runs');\n\n    var resetValue = '# Heading H1  \\n## Heading H2  \\n---  \\n[Markdown Cheat Sheet](https://www.markdownguide.org/cheat-sheet/)  \\n**Bold**  \\n*Italic*  \\n~~Strikethrough~~  \\n`Code`  \\n- Unordered List  \\n1. Ordered List  \\n2. Ordered List  \\n- [ ] Task List  \\n- [x] Task List  \\n\\n![Image](https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/FreeCodeCamp_logo.png/250px-FreeCodeCamp_logo.png)'\n\n    var inputStyle = {\n      width: '400px',\n      height: '73vh',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      padding: '10px',\n    };\n\n    var outputStyle = {\n      width: '400px',\n      height: '73vh',\n      marginLeft: 'auto',\n      marginRight: 'auto',\n      padding: '10px',\n      margin: '18px',\n      border: 'solid 1px grey',\n      backgroundColor: 'lightsteelblue',\n    }\n\n    return (\n      <div className='App'>\n        <div className='container'>\n          <div className='row mt-3'>\n            <div className='col text-center'>\n              <h1>\n                <Badge className='text-align-center' variant='light'>\n                  Markdown Previewer\n                </Badge>\n              </h1>\n            </div>\n          </div>\n          <div className='row mt-2'>\n            <div className='col-md-6'>\n              <div className='col text-center'>\n                <h4>\n                  <Badge className='text-align-center' variant='secondary'>\n                    Markdown Input\n                  </Badge>\n                </h4>\n              </div>\n              <div className='mark-input' style={inputStyle}>\n                <textarea\n                  id='editor'\n                  className='input'\n                  style={inputStyle}\n                  value={this.state.markdown}\n                  onChange={(element) => {\n                    this.updateMarkdown(element.target.value);\n                  }}>\n                </textarea>\n                <div>\n                  <button id='button' onClick={(element) => {\n                    this.setState({\n                      markdown: resetValue\n                    });\n                  }}>\n                    Reset Markdown Input\n                  </button>\n                </div>\n              </div>\n            </div>\n            <div className='col-md-6'>\n              <div className='col text-center'>\n                <h4>\n                  <Badge className='text-align-center' variant='secondary'>\n                    Preview\n                  </Badge>\n                </h4>\n              </div>\n              <div\n                id='preview'\n                style={outputStyle}\n                dangerouslySetInnerHTML={{\n                  __html: marked(this.state.markdown)\n                }}>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}